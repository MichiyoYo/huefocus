{
  "version": 3,
  "sources": ["../../node_modules/use-sound/src/use-on-mount.ts", "../../node_modules/use-sound/src/index.ts"],
  "sourcesContent": ["import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n", "import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound<T = any>(\n  src: string | string[],\n  {\n    id,\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions<T> = {} as HookOptions\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n\n    // @ts-ignore\n    setSound(this);\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        // Depending on the module system used, `mod` might hold\n        // the export directly, or it might be under `default`.\n        HowlConstructor.current = mod.Howl ?? mod.default.Howl;\n\n        isMounted.current = true;\n\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the `src` changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `src` changes. Other changes should have no effect.\n    // Passing array to the useEffect dependencies list will result in\n    // ifinite loop so we need to stringify it, for more details check\n    // https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(src)]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n\nexport { useSound };\n"],
  "mappings": "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",
  "names": ["useOnMount", "callback", "React", "useSound", "src", "_temp", "_ref$volume", "_ref", "volume", "_ref$playbackRate", "playbackRate", "_ref$soundEnabled", "soundEnabled", "_ref$interrupt", "interrupt", "onload", "delegated", "_objectWithoutPropertiesLoose", "_excluded", "HowlConstructor", "useRef", "isMounted", "_React$useState", "useState", "duration", "setDuration", "_React$useState2", "sound", "setSound", "handleLoad", "call", "current", "then", "mod", "_mod$Howl", "Howl", "_extends", "Array", "isArray", "rate", "useEffect", "JSON", "stringify", "play", "useCallback", "options", "forceSoundEnabled", "stop", "id", "pause", "returnedValue"]
}
